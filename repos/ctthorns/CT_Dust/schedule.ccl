# File produced by Kranc

STORAGE: CT_D[timelevels]

STORAGE: CT_E[timelevels]

STORAGE: CT_S[timelevels]

STORAGE: CT_rho[other_timelevels]

STORAGE: CT_eps[other_timelevels]

STORAGE: CT_prs[other_timelevels]

STORAGE: CT_u[other_timelevels]

STORAGE: CT_V[other_timelevels]

STORAGE: CT_W[other_timelevels]

STORAGE: CT_cttS[timelevels]

STORAGE: CT_cttV[timelevels]

STORAGE: CT_rhodp[other_timelevels]

STORAGE: CT_Drhs[rhs_timelevels]

STORAGE: CT_Erhs[rhs_timelevels]

STORAGE: CT_Srhs[rhs_timelevels]
schedule CT_Dust_Startup at STARTUP
{
  LANG: C
  OPTIONS: meta
} "create banner"

schedule CT_Dust_RegisterSymmetries in SymmetryRegister
{
  LANG: C
  OPTIONS: meta
} "register symmetries"

if (CCTK_EQUALS(my_initial_data, "Minkowski"))
{
  schedule CT_Dust_Minkowski IN CCTK_INITIAL after ADMBase_Initial before CT_Dust_setCTTrhs
  {
    LANG: C
    WRITES: CT_Dust::eps(Everywhere)
    WRITES: CT_Dust::prs(Everywhere)
    WRITES: CT_Dust::rho(Everywhere)
    WRITES: CT_Dust::rhodp(Everywhere)
    WRITES: CT_Dust::u1(Everywhere)
    WRITES: CT_Dust::u2(Everywhere)
    WRITES: CT_Dust::u3(Everywhere)
  } "CT_Dust_Minkowski"
}

if (CCTK_EQUALS(my_initial_data, "pFLRW"))
{
  schedule CT_Dust_FLRW_Pert IN CCTK_INITIAL after ADMBase_Initial before CT_Dust_setCTTrhs
  {
    LANG: C
    READS: grid::x(Everywhere)
    READS: grid::y(Everywhere)
    READS: grid::z(Everywhere)
    WRITES: CT_Dust::eps(Everywhere)
    WRITES: ADMBase::gxx(Everywhere)
    WRITES: ADMBase::gxy(Everywhere)
    WRITES: ADMBase::gxz(Everywhere)
    WRITES: ADMBase::gyy(Everywhere)
    WRITES: ADMBase::gyz(Everywhere)
    WRITES: ADMBase::gzz(Everywhere)
    WRITES: ADMBase::kxx(Everywhere)
    WRITES: ADMBase::kxy(Everywhere)
    WRITES: ADMBase::kxz(Everywhere)
    WRITES: ADMBase::kyy(Everywhere)
    WRITES: ADMBase::kyz(Everywhere)
    WRITES: ADMBase::kzz(Everywhere)
    WRITES: CT_Dust::prs(Everywhere)
    WRITES: CT_Dust::rho(Everywhere)
    WRITES: CT_Dust::rhodp(Everywhere)
    WRITES: CT_Dust::u1(Everywhere)
    WRITES: CT_Dust::u2(Everywhere)
    WRITES: CT_Dust::u3(Everywhere)
  } "CT_Dust_FLRW_Pert"
}

if (CCTK_EQUALS(my_initial_data, "SMB"))
{
  schedule CT_Dust_MB IN CCTK_INITIAL after ADMBase_Initial before CT_Dust_setCTTrhs
  {
    LANG: C
    READS: grid::x(Everywhere)
    READS: grid::y(Everywhere)
    READS: grid::z(Everywhere)
    WRITES: ADMBase::alp(Everywhere)
    WRITES: ADMBase::betax(Everywhere)
    WRITES: ADMBase::betay(Everywhere)
    WRITES: ADMBase::betaz(Everywhere)
    WRITES: CT_Dust::eps(Everywhere)
    WRITES: ADMBase::gxx(Everywhere)
    WRITES: ADMBase::gxy(Everywhere)
    WRITES: ADMBase::gxz(Everywhere)
    WRITES: ADMBase::gyy(Everywhere)
    WRITES: ADMBase::gyz(Everywhere)
    WRITES: ADMBase::gzz(Everywhere)
    WRITES: ADMBase::kxx(Everywhere)
    WRITES: ADMBase::kxy(Everywhere)
    WRITES: ADMBase::kxz(Everywhere)
    WRITES: ADMBase::kyy(Everywhere)
    WRITES: ADMBase::kyz(Everywhere)
    WRITES: ADMBase::kzz(Everywhere)
    WRITES: CT_Dust::prs(Everywhere)
    WRITES: CT_Dust::rho(Everywhere)
    WRITES: CT_Dust::rhodp(Everywhere)
    WRITES: CT_Dust::u1(Everywhere)
    WRITES: CT_Dust::u2(Everywhere)
    WRITES: CT_Dust::u3(Everywhere)
  } "CT_Dust_MB"
}

if (CCTK_EQUALS(my_initial_data, "SMB"))
{
  schedule CT_Dust_MB_bound IN MoL_PostStep
  {
    LANG: C
    READS: ADMBase::alp(Everywhere)
    READS: ADMBase::betax(Everywhere)
    READS: ADMBase::betay(Everywhere)
    READS: ADMBase::betaz(Everywhere)
    READS: grid::x(Everywhere)
    READS: grid::y(Everywhere)
    READS: grid::z(Everywhere)
    READS: CT_Dust::eps(Everywhere)
    READS: CT_Dust::u1(Everywhere)
    READS: CT_Dust::u2(Everywhere)
    READS: CT_Dust::u3(Everywhere)
    WRITES: ML_BSSN::At11(BoundaryWithGhosts)
    WRITES: ML_BSSN::At12(BoundaryWithGhosts)
    WRITES: ML_BSSN::At13(BoundaryWithGhosts)
    WRITES: ML_BSSN::At22(BoundaryWithGhosts)
    WRITES: ML_BSSN::At23(BoundaryWithGhosts)
    WRITES: ML_BSSN::At33(BoundaryWithGhosts)
    WRITES: CT_Dust::eps(BoundaryWithGhosts)
    WRITES: ML_BSSN::gt11(BoundaryWithGhosts)
    WRITES: ML_BSSN::gt12(BoundaryWithGhosts)
    WRITES: ML_BSSN::gt13(BoundaryWithGhosts)
    WRITES: ML_BSSN::gt22(BoundaryWithGhosts)
    WRITES: ML_BSSN::gt23(BoundaryWithGhosts)
    WRITES: ML_BSSN::gt33(BoundaryWithGhosts)
    WRITES: ADMBase::gxx(BoundaryWithGhosts)
    WRITES: ADMBase::gxy(BoundaryWithGhosts)
    WRITES: ADMBase::gxz(BoundaryWithGhosts)
    WRITES: ADMBase::gyy(BoundaryWithGhosts)
    WRITES: ADMBase::gyz(BoundaryWithGhosts)
    WRITES: ADMBase::gzz(BoundaryWithGhosts)
    WRITES: ADMBase::kxx(BoundaryWithGhosts)
    WRITES: ADMBase::kxy(BoundaryWithGhosts)
    WRITES: ADMBase::kxz(BoundaryWithGhosts)
    WRITES: ADMBase::kyy(BoundaryWithGhosts)
    WRITES: ADMBase::kyz(BoundaryWithGhosts)
    WRITES: ADMBase::kzz(BoundaryWithGhosts)
    WRITES: ML_BSSN::phi(BoundaryWithGhosts)
    WRITES: CT_Dust::prs(BoundaryWithGhosts)
    WRITES: CT_Dust::rho(BoundaryWithGhosts)
    WRITES: CT_Dust::rhodp(BoundaryWithGhosts)
    WRITES: ML_BSSN::trK(BoundaryWithGhosts)
    WRITES: CT_Dust::u1(BoundaryWithGhosts)
    WRITES: CT_Dust::u2(BoundaryWithGhosts)
    WRITES: CT_Dust::u3(BoundaryWithGhosts)
    WRITES: CT_Dust::W(BoundaryWithGhosts)
    WRITES: ML_BSSN::Xt1(BoundaryWithGhosts)
    WRITES: ML_BSSN::Xt2(BoundaryWithGhosts)
    WRITES: ML_BSSN::Xt3(BoundaryWithGhosts)
  } "CT_Dust_MB_bound"
}

if (CCTK_EQUALS(my_initial_data, "LTB"))
{
  schedule CT_Dust_LTB IN CCTK_INITIAL after ADMBase_Initial before CT_Dust_setCTTrhs
  {
    LANG: C
    READS: grid::x(Everywhere)
    READS: grid::y(Everywhere)
    READS: grid::z(Everywhere)
    WRITES: CT_Dust::eps(Everywhere)
    WRITES: ADMBase::gxx(Everywhere)
    WRITES: ADMBase::gxy(Everywhere)
    WRITES: ADMBase::gxz(Everywhere)
    WRITES: ADMBase::gyy(Everywhere)
    WRITES: ADMBase::gyz(Everywhere)
    WRITES: ADMBase::gzz(Everywhere)
    WRITES: ADMBase::kxx(Everywhere)
    WRITES: ADMBase::kxy(Everywhere)
    WRITES: ADMBase::kxz(Everywhere)
    WRITES: ADMBase::kyy(Everywhere)
    WRITES: ADMBase::kyz(Everywhere)
    WRITES: ADMBase::kzz(Everywhere)
    WRITES: CT_Dust::prs(Everywhere)
    WRITES: CT_Dust::rho(Everywhere)
    WRITES: CT_Dust::rhodp(Everywhere)
    WRITES: CT_Dust::u1(Everywhere)
    WRITES: CT_Dust::u2(Everywhere)
    WRITES: CT_Dust::u3(Everywhere)
  } "CT_Dust_LTB"
}

if (CCTK_EQUALS(my_initial_data, "LTB"))
{
  schedule CT_Dust_LTB_bound IN MoL_PostStep
  {
    LANG: C
    READS: ADMBase::alp(Everywhere)
    READS: ADMBase::betax(Everywhere)
    READS: ADMBase::betay(Everywhere)
    READS: ADMBase::betaz(Everywhere)
    READS: grid::x(Everywhere)
    READS: grid::y(Everywhere)
    READS: grid::z(Everywhere)
    READS: CT_Dust::eps(Everywhere)
    READS: CT_Dust::u1(Everywhere)
    READS: CT_Dust::u2(Everywhere)
    READS: CT_Dust::u3(Everywhere)
    WRITES: ML_BSSN::At11(BoundaryWithGhosts)
    WRITES: ML_BSSN::At12(BoundaryWithGhosts)
    WRITES: ML_BSSN::At13(BoundaryWithGhosts)
    WRITES: ML_BSSN::At22(BoundaryWithGhosts)
    WRITES: ML_BSSN::At23(BoundaryWithGhosts)
    WRITES: ML_BSSN::At33(BoundaryWithGhosts)
    WRITES: CT_Dust::eps(BoundaryWithGhosts)
    WRITES: ML_BSSN::gt11(BoundaryWithGhosts)
    WRITES: ML_BSSN::gt12(BoundaryWithGhosts)
    WRITES: ML_BSSN::gt13(BoundaryWithGhosts)
    WRITES: ML_BSSN::gt22(BoundaryWithGhosts)
    WRITES: ML_BSSN::gt23(BoundaryWithGhosts)
    WRITES: ML_BSSN::gt33(BoundaryWithGhosts)
    WRITES: ADMBase::gxx(BoundaryWithGhosts)
    WRITES: ADMBase::gxy(BoundaryWithGhosts)
    WRITES: ADMBase::gxz(BoundaryWithGhosts)
    WRITES: ADMBase::gyy(BoundaryWithGhosts)
    WRITES: ADMBase::gyz(BoundaryWithGhosts)
    WRITES: ADMBase::gzz(BoundaryWithGhosts)
    WRITES: ADMBase::kxx(BoundaryWithGhosts)
    WRITES: ADMBase::kxy(BoundaryWithGhosts)
    WRITES: ADMBase::kxz(BoundaryWithGhosts)
    WRITES: ADMBase::kyy(BoundaryWithGhosts)
    WRITES: ADMBase::kyz(BoundaryWithGhosts)
    WRITES: ADMBase::kzz(BoundaryWithGhosts)
    WRITES: ML_BSSN::phi(BoundaryWithGhosts)
    WRITES: CT_Dust::prs(BoundaryWithGhosts)
    WRITES: CT_Dust::rho(BoundaryWithGhosts)
    WRITES: CT_Dust::rhodp(BoundaryWithGhosts)
    WRITES: ML_BSSN::trK(BoundaryWithGhosts)
    WRITES: CT_Dust::u1(BoundaryWithGhosts)
    WRITES: CT_Dust::u2(BoundaryWithGhosts)
    WRITES: CT_Dust::u3(BoundaryWithGhosts)
    WRITES: CT_Dust::W(BoundaryWithGhosts)
    WRITES: ML_BSSN::Xt1(BoundaryWithGhosts)
    WRITES: ML_BSSN::Xt2(BoundaryWithGhosts)
    WRITES: ML_BSSN::Xt3(BoundaryWithGhosts)
  } "CT_Dust_LTB_bound"
}

schedule CT_Dust_convertFromPrimitives IN CCTK_INITIAL after ADMBase_Initial after CT_Dust_FLRW_Pert after CT_Dust_Minkowski after CT_Dust_MB_bound after CT_Dust_LTB_bound after CT_MultiLevel
{
  LANG: C
  READS: ADMBase::alp(Everywhere)
  READS: ADMBase::gxx(Everywhere)
  READS: ADMBase::gxy(Everywhere)
  READS: ADMBase::gxz(Everywhere)
  READS: ADMBase::gyy(Everywhere)
  READS: ADMBase::gyz(Everywhere)
  READS: ADMBase::gzz(Everywhere)
  READS: ADMBase::betax(Everywhere)
  READS: ADMBase::betay(Everywhere)
  READS: ADMBase::betaz(Everywhere)
  READS: CT_Dust::eps(Everywhere)
  READS: CT_Dust::rho(Everywhere)
  READS: CT_Dust::u1(Everywhere)
  READS: CT_Dust::u2(Everywhere)
  READS: CT_Dust::u3(Everywhere)
  WRITES: CT_Dust::DD(Everywhere)
  WRITES: CT_Dust::EE(Everywhere)
  WRITES: CT_Dust::SS1(Everywhere)
  WRITES: CT_Dust::SS2(Everywhere)
  WRITES: CT_Dust::SS3(Everywhere)
  WRITES: CT_Dust::V1(Everywhere)
  WRITES: CT_Dust::V2(Everywhere)
  WRITES: CT_Dust::V3(Everywhere)
  WRITES: CT_Dust::W(Everywhere)
} "CT_Dust_convertFromPrimitives"

schedule CT_Dust_RHS IN MoL_CalcRHS
{
  LANG: C
  READS: ADMBase::alp(Everywhere)
  READS: ADMBase::gxx(Everywhere)
  READS: ADMBase::gxy(Everywhere)
  READS: ADMBase::gxz(Everywhere)
  READS: ADMBase::gyy(Everywhere)
  READS: ADMBase::gyz(Everywhere)
  READS: ADMBase::gzz(Everywhere)
  READS: ADMBase::betax(Everywhere)
  READS: ADMBase::betay(Everywhere)
  READS: ADMBase::betaz(Everywhere)
  READS: CT_Dust::DD(Everywhere)
  READS: CT_Dust::EE(Everywhere)
  READS: CT_Dust::eps(Everywhere)
  READS: CT_Dust::prs(Everywhere)
  READS: CT_Dust::rho(Everywhere)
  READS: CT_Dust::SS1(Everywhere)
  READS: CT_Dust::SS2(Everywhere)
  READS: CT_Dust::SS3(Everywhere)
  READS: CT_Dust::u1(Everywhere)
  READS: CT_Dust::u2(Everywhere)
  READS: CT_Dust::u3(Everywhere)
  READS: CT_Dust::V1(Everywhere)
  READS: CT_Dust::V2(Everywhere)
  READS: CT_Dust::V3(Everywhere)
  READS: CT_Dust::W(Everywhere)
  WRITES: CT_Dust::DDrhs(Interior)
  WRITES: CT_Dust::EErhs(Interior)
  WRITES: CT_Dust::SS1rhs(Interior)
  WRITES: CT_Dust::SS2rhs(Interior)
  WRITES: CT_Dust::SS3rhs(Interior)
} "CT_Dust_RHS"

schedule CT_Dust_InitRHS AT analysis BEFORE CT_Dust_RHS
{
  LANG: C
  WRITES: CT_Dust::DDrhs(Everywhere)
  WRITES: CT_Dust::EErhs(Everywhere)
  WRITES: CT_Dust::SS1rhs(Everywhere)
  WRITES: CT_Dust::SS2rhs(Everywhere)
  WRITES: CT_Dust::SS3rhs(Everywhere)
} "CT_Dust_InitRHS"

if (CCTK_EQUALS(my_rhs_boundary_condition, "static"))
{
  schedule CT_Dust_RHSStaticBoundary IN MoL_CalcRHS
  {
    LANG: C
    WRITES: CT_Dust::DDrhs(Boundary)
    WRITES: CT_Dust::EErhs(Boundary)
    WRITES: CT_Dust::SS1rhs(Boundary)
    WRITES: CT_Dust::SS2rhs(Boundary)
    WRITES: CT_Dust::SS3rhs(Boundary)
  } "CT_Dust_RHSStaticBoundary"
}

if (CCTK_EQUALS(my_boundary_condition, "Minkowski"))
{
  schedule CT_Dust_boundary IN MoL_PostStep
  {
    LANG: C
    WRITES: CT_Dust::DD(BoundaryWithGhosts)
    WRITES: CT_Dust::EE(BoundaryWithGhosts)
    WRITES: CT_Dust::SS1(BoundaryWithGhosts)
    WRITES: CT_Dust::SS2(BoundaryWithGhosts)
    WRITES: CT_Dust::SS3(BoundaryWithGhosts)
  } "CT_Dust_boundary"
}

schedule CT_Dust_convertToPrimitives in MoL_PostStep before SetTmunu after ADMBase_SetADMVars
{
  LANG: C
  READS: ADMBase::alp(Everywhere)
  READS: ADMBase::gxx(Everywhere)
  READS: ADMBase::gxy(Everywhere)
  READS: ADMBase::gxz(Everywhere)
  READS: ADMBase::gyy(Everywhere)
  READS: ADMBase::gyz(Everywhere)
  READS: ADMBase::gzz(Everywhere)
  READS: ADMBase::betax(Everywhere)
  READS: ADMBase::betay(Everywhere)
  READS: ADMBase::betaz(Everywhere)
  READS: CT_Dust::DD(Everywhere)
  READS: CT_Dust::EE(Everywhere)
  READS: CT_Dust::SS1(Everywhere)
  READS: CT_Dust::SS2(Everywhere)
  READS: CT_Dust::SS3(Everywhere)
  WRITES: CT_Dust::eps(Everywhere)
  WRITES: CT_Dust::prs(Everywhere)
  WRITES: CT_Dust::rho(Everywhere)
  WRITES: CT_Dust::rhodp(Everywhere)
  WRITES: CT_Dust::u1(Everywhere)
  WRITES: CT_Dust::u2(Everywhere)
  WRITES: CT_Dust::u3(Everywhere)
  WRITES: CT_Dust::V1(Everywhere)
  WRITES: CT_Dust::V2(Everywhere)
  WRITES: CT_Dust::V3(Everywhere)
  WRITES: CT_Dust::W(Everywhere)
} "CT_Dust_convertToPrimitives"

if (CCTK_EQUALS(coupling, "yes"))
{
  schedule CT_Dust_addToTmunu IN AddToTmunu
  {
    LANG: C
    READS: ADMBase::alp(Everywhere)
    READS: ADMBase::gxx(Everywhere)
    READS: ADMBase::gxy(Everywhere)
    READS: ADMBase::gxz(Everywhere)
    READS: ADMBase::gyy(Everywhere)
    READS: ADMBase::gyz(Everywhere)
    READS: ADMBase::gzz(Everywhere)
    READS: ADMBase::betax(Everywhere)
    READS: ADMBase::betay(Everywhere)
    READS: ADMBase::betaz(Everywhere)
    READS: CT_Dust::prs(Everywhere)
    READS: CT_Dust::rho(Everywhere)
    READS: CT_Dust::u1(Everywhere)
    READS: CT_Dust::u2(Everywhere)
    READS: CT_Dust::u3(Everywhere)
    WRITES: TmunuBase::eTtt(Everywhere)
    WRITES: TmunuBase::eTtx(Everywhere)
    WRITES: TmunuBase::eTty(Everywhere)
    WRITES: TmunuBase::eTtz(Everywhere)
    WRITES: TmunuBase::eTxx(Everywhere)
    WRITES: TmunuBase::eTxy(Everywhere)
    WRITES: TmunuBase::eTxz(Everywhere)
    WRITES: TmunuBase::eTyy(Everywhere)
    WRITES: TmunuBase::eTyz(Everywhere)
    WRITES: TmunuBase::eTzz(Everywhere)
  } "CT_Dust_addToTmunu"
}

schedule CT_Dust_setCTTrhs AT INITIAL before CT_MultiLevel
{
  LANG: C
  SYNC: CT_cttS
  SYNC: CT_cttV
  READS: ADMBase::alp(Everywhere)
  READS: ADMBase::gxx(Everywhere)
  READS: ADMBase::gxy(Everywhere)
  READS: ADMBase::gxz(Everywhere)
  READS: ADMBase::gyy(Everywhere)
  READS: ADMBase::gyz(Everywhere)
  READS: ADMBase::gzz(Everywhere)
  READS: ADMBase::betax(Everywhere)
  READS: ADMBase::betay(Everywhere)
  READS: ADMBase::betaz(Everywhere)
  READS: CT_Dust::prs(Everywhere)
  READS: CT_Dust::rho(Everywhere)
  READS: CT_Dust::u1(Everywhere)
  READS: CT_Dust::u2(Everywhere)
  READS: CT_Dust::u3(Everywhere)
  WRITES: CT_Dust::cttS(Interior)
  WRITES: CT_Dust::cttV1(Interior)
  WRITES: CT_Dust::cttV2(Interior)
  WRITES: CT_Dust::cttV3(Interior)
} "CT_Dust_setCTTrhs"

schedule CT_Dust_SelectBoundConds in MoL_PostStep
{
  LANG: C
  OPTIONS: level
  SYNC: CT_D
  SYNC: CT_E
  SYNC: CT_S
} "select boundary conditions"

schedule CT_Dust_CheckBoundaries at BASEGRID
{
  LANG: C
  OPTIONS: meta
} "check boundaries treatment"

schedule CT_Dust_RegisterVars in MoL_Register
{
  LANG: C
  OPTIONS: meta
} "Register Variables for MoL"
schedule group ApplyBCs as CT_Dust_ApplyBCs in MoL_PostStep after CT_Dust_SelectBoundConds
{
} "Apply boundary conditions controlled by thorn Boundary"
