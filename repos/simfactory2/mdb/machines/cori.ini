[cori]

# last-tested-on: 2016-11-22
# last-tested-by: Roland Haas <rhaas@illinois.edu>

# Machine description
nickname        = cori
name            = Cori
location        = NERSC
description     = A Cray XC at NERSC
webpage         = https://www.nersc.gov/users/computational-systems/cori/
status          = production

# Access to this machine
hostname        = cori.nersc.gov
# craype-haswell needs to be loaded after PrgEnv-XXX
envsetup        = <<EOT
    # this is quite horrible but required to get a return code out of module
    function simfactory_module() {
      local MODCMDS RC
      MODCMDS="$(
      exec 3>&1 4>&2
      modulecmd bash $* 2>&1 1>&3 | \
        awk '{print >"/dev/fd/4";rc += /ERROR/}
             END{exit !!rc}'
      )"
      RC=$?
      eval $MODCMDS
      return $RC
    }
    source /etc/profile.d/modules.sh
    # needs to go since modulecommand binds against it and requires libimf
    module unload zlib
    module unload PrgEnv-intel
    module unload PrgEnv-cray
    module unload PrgEnv-gnu
    module unload PrgEnv-pgi
    module unload craype-mic-knl
    module unload craype-haswell
    module unload gcc
    module unload intel
    simfactory_module load PrgEnv-intel/6.0.5 &&
    simfactory_module load craype-haswell &&
    simfactory_module load boost/1.70.0 &&
    simfactory_module load zlib/1.2.11 &&
    simfactory_module load cray-hdf5-parallel/1.10.2.0 &&
    simfactory_module load cray-petsc/3.9.3.0 &&
    simfactory_module load cray-fftw/3.3.8.2 &&
    simfactory_module load gsl/2.5 &&
    simfactory_module load papi/5.6.0.6
EOT
aliaspattern    = ^cori\d+(\.nersc\.gov)?$

# Source tree management
sourcebasedir   = /project/projectdirs/m152/@USER@/cori
disabled-thorns = <<EOT
    ExternalLibraries/BLAS
    ExternalLibraries/LAPACK
EOT
enabled-thorns = <<EOT
    ExternalLibraries/OpenBLAS
    ExternalLibraries/pciutils
EOT
optionlist      = cori.cfg
submitscript    = cori.sub
runscript       = cori.run
makejobs        = 16
make            = make -j@MAKEJOBS@

# Simulation management
basedir         = /global/cscratch1/sd/@USER@/simulations
cpu             = Two 2.3 GHz 16-core Haswell processors per node
cpufreq         = 2.3
flop/cycle      = 8
max-num-smt     = 2
num-smt         = 1
ppn             = 32
spn             = 2
max-num-threads = 64
num-threads     = 16
memory          = 131072
nodes           = 1630
min-ppn         = 32
allocation      = NO_ALLOCATION
queue           = regular
maxwalltime     = 48:00:00
submit          = sbatch @SCRIPTFILE@
getstatus       = squeue -j @JOB_ID@
stop            = scancel @JOB_ID@
submitpattern   = 'Submitted batch job (\d+)'
statuspattern   = '@JOB_ID@ '
queuedpattern   = ' PD '
runningpattern  = ' (CF|CG|R|TO) '
holdingpattern  = '\(JobHeldUser\)'
scratchbasedir   = /scratch2/scratchdirs/@USER@
exechost        = hostname
exechostpattern = (.*)
stdout          = cat @SIMULATION_NAME@.out
stderr          = cat @SIMULATION_NAME@.err
stdout-follow   = tail -n 100 -f @SIMULATION_NAME@.out @SIMULATION_NAME@.err
