STORAGE: jacobian
STORAGE: jacobian2
STORAGE: general_coordinates
STORAGE: interpolate_boundary_points
STORAGE: jacobian_state
STORAGE: jacobian_derivative_state
STORAGE: inverse_jacobian_state
STORAGE: volume_form_state

if (store_inverse_jacobian)
{
  STORAGE: inverse_jacobian
}

if (store_volume_form)
{
  STORAGE: volume_form
}

schedule Coordinates_ParamCheck at CCTK_PARAMCHECK
{
  LANG: C
} "Check thorn parameters for consistency."

schedule Coordinates_ChoosePatchSystem at CCTK_STARTUP before Driver_Startup
{
  LANG: C
  OPTIONS: meta
} "Choose patch system"

if (register_symmetry)
{
  schedule Coordinates_RegisterSymmetry in SymmetryRegister
  {
    LANG: C
    OPTIONS: meta
  } "Register inter-patch boundaries as symmetries"
}

schedule group Coordinates_SetGlobalCoords_Group at CCTK_BASEGRID after SpatialCoordinates as MultiPatch_SpatialCoordinates
{
} "Determine the global coordinates of each gridpoint."

schedule group Coordinates_SetGlobalCoords_Group at CCTK_POSTREGRIDINITIAL after SpatialCoordinates as MultiPatch_SpatialCoordinates
{
} "Determine the global coordinates of each gridpoint."

schedule group Coordinates_SetGlobalCoords_Group at CCTK_POSTREGRID after SpatialCoordinates as MultiPatch_SpatialCoordinates
{
} "Determine the global coordinates of each gridpoint."


if (CCTK_Equals(coordinate_system, "cartesian"))
{
  schedule Coordinates_SetJacobian_Cartesian in Coordinates_SetGlobalCoords_Group \
    as Coordinates_SetJacobian
  {
    LANG: C
    OPTIONS: local
    WRITES: general_coordinates, interpolate_boundary_points, jacobian_state,
            jacobian_derivative_state
    WRITES: jacobian(everywhere), jacobian2(everywhere)
  } "Fill in the Jacobian matrices for cartesian coordinates."
}


if (CCTK_Equals(coordinate_system, "twopatchcartesian"))
{
  schedule Coordinates_SetGlobalCoords_TwoPatchCartesian in Coordinates_SetGlobalCoords_Group \
    as Coordinates_SetGlobalCoords
  {
    LANG: C
    OPTIONS: local
    WRITES: grid::coordinates(everywhere)
  } "Determine the global coordinates of each gridpoint."

  schedule Coordinates_SetJacobian_TwoPatchCartesian in Coordinates_SetGlobalCoords_Group \
    as Coordinates_SetJacobian
  {
    LANG: C
    OPTIONS: local
    WRITES: general_coordinates, interpolate_boundary_points, jacobian_state,
            jacobian_derivative_state
    WRITES: jacobian(everywhere), jacobian2(everywhere)
  } "Fill in the Jacobian matrices for two patch cartesian coordinates."
}


if (CCTK_Equals(coordinate_system, "TwoPatchDistorted"))
{
  schedule Coordinates_SetGlobalCoords_TwoPatchDistorted in Coordinates_SetGlobalCoords_Group \
    as Coordinates_SetGlobalCoords
  {
    LANG: C
    OPTIONS: local
    WRITES: grid::coordinates(everywhere)
  } "Determine the global coordinates of each gridpoint."

  schedule Coordinates_SetJacobian_TwoPatchDistorted in Coordinates_SetGlobalCoords_Group \
    as Coordinates_SetJacobian
  {
    LANG: C
    OPTIONS: local
    READS: grid::coordinates(everywhere)
    WRITES: general_coordinates, interpolate_boundary_points, jacobian_state,
            jacobian_derivative_state
    WRITES: jacobian(everywhere), jacobian2(everywhere)
  } "Fill in the Jacobian matrices for TwoPatchDistorted coordinates."
}



if (CCTK_Equals(coordinate_system, "Thornburg04"))
{
  schedule Coordinates_SetGlobalCoords_Thornburg04 \
    in Coordinates_SetGlobalCoords_Group \
    as Coordinates_SetGlobalCoords
  {
    LANG: C
    OPTIONS: local
    WRITES: grid::coordinates(everywhere)
  } "Determine the global coordinates of each gridpoint."

  schedule Coordinates_SetJacobian_Thornburg04 in Coordinates_SetGlobalCoords_Group \
    as Coordinates_SetJacobian
  {
    LANG: C
    OPTIONS: local
    READS: grid::coordinates(everywhere)
    WRITES: general_coordinates, interpolate_boundary_points, jacobian_state,
            jacobian_derivative_state
    WRITES: jacobian(everywhere), jacobian2(everywhere)
  } "Fill in the Jacobian matrices for Thornburg04 coordinates."
  
  schedule Coordinates_SetVolumeForm_Thornburg04 in Coordinates_SetGlobalCoords_Group \
    as Coordinates_SetVolumeForm AFTER (Coordinates_SetJacobian, Coordinates_SetGlobalCoords, Coordinates_SetInverseJacobian)
  {
    LANG: C
    OPTIONS: local
    READS: grid::coordinates(everywhere)
    READS: jacobian(everywhere)
    WRITES: volume_form(everywhere), volume_form_state
  } "Set weight mask (for Carpet reduction operators)"
}



if (CCTK_Equals(coordinate_system, "Thornburg13"))
{
  schedule Coordinates_SetGlobalCoords_Thornburg13 in Coordinates_SetGlobalCoords_Group \
    as Coordinates_SetGlobalCoords
  {
    LANG: C
    OPTIONS: local
    WRITES: grid::coordinates(everywhere)
  } "Determine the global coordinates of each gridpoint."

  schedule Coordinates_SetJacobian_Thornburg13 in Coordinates_SetGlobalCoords_Group \
    as Coordinates_SetJacobian
  {
    LANG: C
    OPTIONS: local
    READS: grid::coordinates(everywhere)
    WRITES: general_coordinates, interpolate_boundary_points, jacobian_state,
            jacobian_derivative_state
    WRITES: jacobian(everywhere), jacobian2(everywhere)
  } "Fill in the Jacobian matrices for Thornburg13 coordinates."
  
  schedule Coordinates_SetVolumeForm_Thornburg13 in Coordinates_SetGlobalCoords_Group \
    as Coordinates_SetVolumeForm AFTER (Coordinates_SetJacobian, Coordinates_SetGlobalCoords, Coordinates_SetInverseJacobian)
  {
    LANG: C
    OPTIONS: local
    READS: grid::coordinates(everywhere)
    READS: jacobian(everywhere)
    WRITES: volume_form(everywhere), volume_form_state
  } "Set weight mask (for Carpet reduction operators)"
}


if (CCTK_Equals(coordinate_system, "Thornburg04nc"))
{
  schedule Coordinates_SetGlobalCoords_Thornburg04nc in Coordinates_SetGlobalCoords_Group \
    as Coordinates_SetGlobalCoords
  {
    LANG: C
    OPTIONS: local
    WRITES: grid::coordinates(everywhere)
  } "Determine the global coordinates of each gridpoint."

  schedule Coordinates_SetJacobian_Thornburg04nc in Coordinates_SetGlobalCoords_Group \
    as Coordinates_SetJacobian
  {
    LANG: C
    OPTIONS: local
    READS: grid::coordinates(everywhere)
    WRITES: general_coordinates, interpolate_boundary_points, jacobian_state,
            jacobian_derivative_state
    WRITES: jacobian(everywhere), jacobian2(everywhere)
  } "Fill in the Jacobian matrices for Thornburg04nc coordinates."
}


if (CCTK_Equals(coordinate_system, "CylinderInBox"))
{
  schedule Coordinates_SetGlobalCoords_CylinderInBox in Coordinates_SetGlobalCoords_Group \
    as Coordinates_SetGlobalCoords
  {
    LANG: C
    OPTIONS: local
    WRITES: grid::coordinates(everywhere)
  } "Determine the global coordinates of each gridpoint."

  schedule Coordinates_SetJacobian_CylinderInBox in Coordinates_SetGlobalCoords_Group \
    as Coordinates_SetJacobian
  {
    LANG: C
    OPTIONS: local
    READS: grid::coordinates(everywhere)
    WRITES: general_coordinates, interpolate_boundary_points, jacobian_state,
            jacobian_derivative_state
    WRITES: jacobian(everywhere), jacobian2(everywhere)
  } "Fill in the Jacobian matrices for CylinderInBox coordinates."
}

if (CCTK_Equals(coordinate_system, "Sphere+Column"))
{
  schedule Coordinates_SetGlobalCoords_SphereColumn in Coordinates_SetGlobalCoords_Group \
    as Coordinates_SetGlobalCoords
  {
    LANG: C
    OPTIONS: local
    WRITES: grid::coordinates(everywhere)
  } "Determine the global coordinates of each gridpoint."

  schedule Coordinates_SetJacobian_SphereColumn in Coordinates_SetGlobalCoords_Group \
    as Coordinates_SetJacobian
  {
    LANG: C
    OPTIONS: local
    READS: grid::coordinates(everywhere)
    WRITES: general_coordinates, interpolate_boundary_points, jacobian_state,
            jacobian_derivative_state
    WRITES: jacobian(everywhere), jacobian2(everywhere)
  } "Fill in the Jacobian matrices for Sphere+Column coordinates."
}

if (CCTK_Equals(coordinate_system, "Cylinder+Column"))
{
  schedule Coordinates_SetGlobalCoords_CylinderColumn in Coordinates_SetGlobalCoords_Group \
    as Coordinates_SetGlobalCoords
  {
    LANG: C
    OPTIONS: local
    WRITES: grid::coordinates(everywhere)
  } "Determine the global coordinates of each gridpoint."

  schedule Coordinates_SetJacobian_CylinderColumn in Coordinates_SetGlobalCoords_Group \
    as Coordinates_SetJacobian
  {
    LANG: C
    OPTIONS: local
    READS: grid::coordinates(everywhere)
    WRITES: general_coordinates, interpolate_boundary_points, jacobian_state,
            jacobian_derivative_state
    WRITES: jacobian(everywhere), jacobian2(everywhere)
  } "Fill in the Jacobian matrices for Cylinder+Column coordinates."
}

if (store_inverse_jacobian || store_volume_form)
{
  schedule Coordinates_SetInverseJacobian in Coordinates_SetGlobalCoords_Group after Coordinates_SetJacobian
  {
    LANG: Fortran
    OPTIONS: local
  } "Numerically evaluate the inverse Jacobian matrices."
	
}
