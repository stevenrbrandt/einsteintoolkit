# File produced by Kranc

STORAGE: WT_u[timelevels]

STORAGE: WT_v[timelevels]

STORAGE: WT_rho[timelevels]

STORAGE: WT_w[other_timelevels]

STORAGE: WT_rhorhs[rhs_timelevels]

STORAGE: WT_urhs[rhs_timelevels]

STORAGE: WT_vrhs[rhs_timelevels]
schedule ML_WaveToyFO_Startup at STARTUP
{
  LANG: C
  OPTIONS: meta
} "create banner"

schedule ML_WaveToyFO_RegisterSymmetries in SymmetryRegister
{
  LANG: C
  OPTIONS: meta
} "register symmetries"

schedule WTFO_Gaussian AT initial
{
  LANG: C
  WRITES: ML_WaveToyFO::rho(Everywhere)
  WRITES: ML_WaveToyFO::u(Everywhere)
  WRITES: ML_WaveToyFO::v1(Everywhere)
  WRITES: ML_WaveToyFO::v2(Everywhere)
  WRITES: ML_WaveToyFO::v3(Everywhere)
} "WTFO_Gaussian"

schedule WTFO_RHS IN MoL_CalcRHS
{
  LANG: C
  READS: ML_WaveToyFO::rho(Everywhere)
  READS: ML_WaveToyFO::v1(Everywhere)
  READS: ML_WaveToyFO::v2(Everywhere)
  READS: ML_WaveToyFO::v3(Everywhere)
  WRITES: ML_WaveToyFO::rhorhs(Interior)
  WRITES: ML_WaveToyFO::urhs(Interior)
  WRITES: ML_WaveToyFO::v1rhs(Interior)
  WRITES: ML_WaveToyFO::v2rhs(Interior)
  WRITES: ML_WaveToyFO::v3rhs(Interior)
} "WTFO_RHS"

schedule WTFO_RHS AT analysis
{
  LANG: C
  SYNC: WT_rhorhs
  SYNC: WT_urhs
  SYNC: WT_vrhs
  READS: ML_WaveToyFO::rho(Everywhere)
  READS: ML_WaveToyFO::v1(Everywhere)
  READS: ML_WaveToyFO::v2(Everywhere)
  READS: ML_WaveToyFO::v3(Everywhere)
  WRITES: ML_WaveToyFO::rhorhs(Interior)
  WRITES: ML_WaveToyFO::urhs(Interior)
  WRITES: ML_WaveToyFO::v1rhs(Interior)
  WRITES: ML_WaveToyFO::v2rhs(Interior)
  WRITES: ML_WaveToyFO::v3rhs(Interior)
} "WTFO_RHS"

schedule WTFO_constraints AT analysis
{
  LANG: C
  SYNC: WT_w
  READS: ML_WaveToyFO::v1(Everywhere)
  READS: ML_WaveToyFO::v2(Everywhere)
  READS: ML_WaveToyFO::v3(Everywhere)
  WRITES: ML_WaveToyFO::w1(Interior)
  WRITES: ML_WaveToyFO::w2(Interior)
  WRITES: ML_WaveToyFO::w3(Interior)
} "WTFO_constraints"

schedule ML_WaveToyFO_SelectBoundConds in MoL_PostStep
{
  LANG: C
  OPTIONS: level
  SYNC: WT_u
  SYNC: WT_v
  SYNC: WT_rho
} "select boundary conditions"

schedule ML_WaveToyFO_CheckBoundaries at BASEGRID
{
  LANG: C
  OPTIONS: meta
} "check boundaries treatment"

schedule ML_WaveToyFO_RegisterVars in MoL_Register
{
  LANG: C
  OPTIONS: meta
} "Register Variables for MoL"
schedule group ApplyBCs as ML_WaveToyFO_ApplyBCs in MoL_PostStep after ML_WaveToyFO_SelectBoundConds
{
} "Apply boundary conditions controlled by thorn Boundary"
