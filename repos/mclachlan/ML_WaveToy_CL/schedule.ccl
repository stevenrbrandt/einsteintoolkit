# File produced by Kranc

STORAGE: WT_u[timelevels]

STORAGE: WT_rho[timelevels]

STORAGE: WT_eps[other_timelevels]

STORAGE: WT_rhorhs[rhs_timelevels]

STORAGE: WT_urhs[rhs_timelevels]
schedule ML_WaveToy_CL_Startup at STARTUP
{
  LANG: C
  OPTIONS: meta
} "create banner"

schedule ML_WaveToy_CL_RegisterSymmetries in SymmetryRegister
{
  LANG: C
  OPTIONS: meta
} "register symmetries"

if (CCTK_EQUALS(initial_data, "Gaussian"))
{
  schedule WT_CL_Gaussian AT initial
  {
    LANG: C
    TAGS: Device=1
    READS: grid::r(Everywhere)
    WRITES: ML_WaveToy_CL::rho(Everywhere)
    WRITES: ML_WaveToy_CL::u(Everywhere)
  } "WT_CL_Gaussian"
}

if (CCTK_EQUALS(initial_data, "Standing"))
{
  schedule WT_CL_Standing AT initial
  {
    LANG: C
    TAGS: Device=1
    READS: grid::x(Everywhere)
    READS: grid::y(Everywhere)
    READS: grid::z(Everywhere)
    WRITES: ML_WaveToy_CL::rho(Everywhere)
    WRITES: ML_WaveToy_CL::u(Everywhere)
  } "WT_CL_Standing"
}

schedule WT_CL_RHS IN MoL_CalcRHS
{
  LANG: C
  TAGS: Device=1
  READS: ML_WaveToy_CL::rho(Everywhere)
  READS: ML_WaveToy_CL::u(Everywhere)
  WRITES: ML_WaveToy_CL::rhorhs(Interior)
  WRITES: ML_WaveToy_CL::urhs(Interior)
} "WT_CL_RHS"

schedule WT_CL_Dirichlet IN MoL_CalcRHS
{
  LANG: C
  TAGS: Device=1
  WRITES: ML_WaveToy_CL::rhorhs(Boundary)
  WRITES: ML_WaveToy_CL::urhs(Boundary)
} "WT_CL_Dirichlet"

schedule WT_CL_Dirichlet AT analysis
{
  LANG: C
  SYNC: WT_rhorhs
  SYNC: WT_urhs
  TAGS: Device=1
  WRITES: ML_WaveToy_CL::rhorhs(Boundary)
  WRITES: ML_WaveToy_CL::urhs(Boundary)
} "WT_CL_Dirichlet"

schedule WT_CL_Energy AT analysis
{
  LANG: C
  SYNC: WT_eps
  TAGS: Device=1
  READS: ML_WaveToy_CL::rho(Everywhere)
  READS: ML_WaveToy_CL::u(Everywhere)
  WRITES: ML_WaveToy_CL::eps(Interior)
} "WT_CL_Energy"

schedule WT_CL_EnergyBoundary AT analysis
{
  LANG: C
  SYNC: WT_eps
  TAGS: Device=1
  WRITES: ML_WaveToy_CL::eps(Boundary)
} "WT_CL_EnergyBoundary"

schedule ML_WaveToy_CL_SelectBoundConds in MoL_PostStep
{
  LANG: C
  OPTIONS: level
  SYNC: WT_u
  SYNC: WT_rho
} "select boundary conditions"

schedule ML_WaveToy_CL_CheckBoundaries at BASEGRID
{
  LANG: C
  OPTIONS: meta
} "check boundaries treatment"

schedule ML_WaveToy_CL_RegisterVars in MoL_Register
{
  LANG: C
  OPTIONS: meta
} "Register Variables for MoL"
schedule group ApplyBCs as ML_WaveToy_CL_ApplyBCs in MoL_PostStep after ML_WaveToy_CL_SelectBoundConds
{
} "Apply boundary conditions controlled by thorn Boundary"
