# File produced by Kranc

STORAGE: ML_metric[timelevels]

STORAGE: ML_curv[timelevels]

STORAGE: ML_lapse[timelevels]

STORAGE: ML_shift[timelevels]

STORAGE: ML_Ham[other_timelevels]

STORAGE: ML_mom[other_timelevels]

STORAGE: ML_curvrhs[rhs_timelevels]

STORAGE: ML_lapserhs[rhs_timelevels]

STORAGE: ML_metricrhs[rhs_timelevels]

STORAGE: ML_shiftrhs[rhs_timelevels]
schedule ML_ADM_Startup at STARTUP
{
  LANG: C
  OPTIONS: meta
} "create banner"

schedule ML_ADM_RegisterSymmetries in SymmetryRegister
{
  LANG: C
  OPTIONS: meta
} "register symmetries"

if (CCTK_EQUALS(my_initial_data, "Minkowski"))
{
  schedule ML_ADM_Minkowski IN ADMBase_InitialData
  {
    LANG: C
    WRITES: ML_ADM::alpha(Everywhere)
    WRITES: ML_ADM::beta1(Everywhere)
    WRITES: ML_ADM::beta2(Everywhere)
    WRITES: ML_ADM::beta3(Everywhere)
    WRITES: ML_ADM::g11(Everywhere)
    WRITES: ML_ADM::g12(Everywhere)
    WRITES: ML_ADM::g13(Everywhere)
    WRITES: ML_ADM::g22(Everywhere)
    WRITES: ML_ADM::g23(Everywhere)
    WRITES: ML_ADM::g33(Everywhere)
    WRITES: ML_ADM::K11(Everywhere)
    WRITES: ML_ADM::K12(Everywhere)
    WRITES: ML_ADM::K13(Everywhere)
    WRITES: ML_ADM::K22(Everywhere)
    WRITES: ML_ADM::K23(Everywhere)
    WRITES: ML_ADM::K33(Everywhere)
  } "ML_ADM_Minkowski"
}

if (CCTK_EQUALS(my_initial_data, "ADMBase"))
{
  schedule ML_ADM_convertFromADMBase AT initial AFTER ADMBase_PostInitial
  {
    LANG: C
    READS: ADMBase::kxx(Everywhere)
    READS: ADMBase::kxy(Everywhere)
    READS: ADMBase::kxz(Everywhere)
    READS: ADMBase::kyy(Everywhere)
    READS: ADMBase::kyz(Everywhere)
    READS: ADMBase::kzz(Everywhere)
    READS: ADMBase::alp(Everywhere)
    READS: ADMBase::gxx(Everywhere)
    READS: ADMBase::gxy(Everywhere)
    READS: ADMBase::gxz(Everywhere)
    READS: ADMBase::gyy(Everywhere)
    READS: ADMBase::gyz(Everywhere)
    READS: ADMBase::gzz(Everywhere)
    READS: ADMBase::betax(Everywhere)
    READS: ADMBase::betay(Everywhere)
    READS: ADMBase::betaz(Everywhere)
    WRITES: ML_ADM::alpha(Everywhere)
    WRITES: ML_ADM::beta1(Everywhere)
    WRITES: ML_ADM::beta2(Everywhere)
    WRITES: ML_ADM::beta3(Everywhere)
    WRITES: ML_ADM::g11(Everywhere)
    WRITES: ML_ADM::g12(Everywhere)
    WRITES: ML_ADM::g13(Everywhere)
    WRITES: ML_ADM::g22(Everywhere)
    WRITES: ML_ADM::g23(Everywhere)
    WRITES: ML_ADM::g33(Everywhere)
    WRITES: ML_ADM::K11(Everywhere)
    WRITES: ML_ADM::K12(Everywhere)
    WRITES: ML_ADM::K13(Everywhere)
    WRITES: ML_ADM::K22(Everywhere)
    WRITES: ML_ADM::K23(Everywhere)
    WRITES: ML_ADM::K33(Everywhere)
  } "ML_ADM_convertFromADMBase"
}

schedule ML_ADM_RHS IN MoL_CalcRHS
{
  LANG: C
  READS: ML_ADM::K11(Everywhere)
  READS: ML_ADM::K12(Everywhere)
  READS: ML_ADM::K13(Everywhere)
  READS: ML_ADM::K22(Everywhere)
  READS: ML_ADM::K23(Everywhere)
  READS: ML_ADM::K33(Everywhere)
  READS: ML_ADM::alpha(Everywhere)
  READS: ML_ADM::g11(Everywhere)
  READS: ML_ADM::g12(Everywhere)
  READS: ML_ADM::g13(Everywhere)
  READS: ML_ADM::g22(Everywhere)
  READS: ML_ADM::g23(Everywhere)
  READS: ML_ADM::g33(Everywhere)
  READS: ML_ADM::beta1(Everywhere)
  READS: ML_ADM::beta2(Everywhere)
  READS: ML_ADM::beta3(Everywhere)
  WRITES: ML_ADM::alpharhs(Interior)
  WRITES: ML_ADM::beta1rhs(Interior)
  WRITES: ML_ADM::beta2rhs(Interior)
  WRITES: ML_ADM::beta3rhs(Interior)
  WRITES: ML_ADM::g11rhs(Interior)
  WRITES: ML_ADM::g12rhs(Interior)
  WRITES: ML_ADM::g13rhs(Interior)
  WRITES: ML_ADM::g22rhs(Interior)
  WRITES: ML_ADM::g23rhs(Interior)
  WRITES: ML_ADM::g33rhs(Interior)
  WRITES: ML_ADM::K11rhs(Interior)
  WRITES: ML_ADM::K12rhs(Interior)
  WRITES: ML_ADM::K13rhs(Interior)
  WRITES: ML_ADM::K22rhs(Interior)
  WRITES: ML_ADM::K23rhs(Interior)
  WRITES: ML_ADM::K33rhs(Interior)
} "ML_ADM_RHS"

schedule ML_ADM_RHS AT analysis
{
  LANG: C
  SYNC: ML_curvrhs
  SYNC: ML_lapserhs
  SYNC: ML_metricrhs
  SYNC: ML_shiftrhs
  READS: ML_ADM::K11(Everywhere)
  READS: ML_ADM::K12(Everywhere)
  READS: ML_ADM::K13(Everywhere)
  READS: ML_ADM::K22(Everywhere)
  READS: ML_ADM::K23(Everywhere)
  READS: ML_ADM::K33(Everywhere)
  READS: ML_ADM::alpha(Everywhere)
  READS: ML_ADM::g11(Everywhere)
  READS: ML_ADM::g12(Everywhere)
  READS: ML_ADM::g13(Everywhere)
  READS: ML_ADM::g22(Everywhere)
  READS: ML_ADM::g23(Everywhere)
  READS: ML_ADM::g33(Everywhere)
  READS: ML_ADM::beta1(Everywhere)
  READS: ML_ADM::beta2(Everywhere)
  READS: ML_ADM::beta3(Everywhere)
  WRITES: ML_ADM::alpharhs(Interior)
  WRITES: ML_ADM::beta1rhs(Interior)
  WRITES: ML_ADM::beta2rhs(Interior)
  WRITES: ML_ADM::beta3rhs(Interior)
  WRITES: ML_ADM::g11rhs(Interior)
  WRITES: ML_ADM::g12rhs(Interior)
  WRITES: ML_ADM::g13rhs(Interior)
  WRITES: ML_ADM::g22rhs(Interior)
  WRITES: ML_ADM::g23rhs(Interior)
  WRITES: ML_ADM::g33rhs(Interior)
  WRITES: ML_ADM::K11rhs(Interior)
  WRITES: ML_ADM::K12rhs(Interior)
  WRITES: ML_ADM::K13rhs(Interior)
  WRITES: ML_ADM::K22rhs(Interior)
  WRITES: ML_ADM::K23rhs(Interior)
  WRITES: ML_ADM::K33rhs(Interior)
} "ML_ADM_RHS"

if (CCTK_EQUALS(my_boundary_condition, "Minkowski"))
{
  schedule ML_ADM_boundary IN MoL_PostStep
  {
    LANG: C
    WRITES: ML_ADM::alpha(BoundaryWithGhosts)
    WRITES: ML_ADM::beta1(BoundaryWithGhosts)
    WRITES: ML_ADM::beta2(BoundaryWithGhosts)
    WRITES: ML_ADM::beta3(BoundaryWithGhosts)
    WRITES: ML_ADM::g11(BoundaryWithGhosts)
    WRITES: ML_ADM::g12(BoundaryWithGhosts)
    WRITES: ML_ADM::g13(BoundaryWithGhosts)
    WRITES: ML_ADM::g22(BoundaryWithGhosts)
    WRITES: ML_ADM::g23(BoundaryWithGhosts)
    WRITES: ML_ADM::g33(BoundaryWithGhosts)
    WRITES: ML_ADM::K11(BoundaryWithGhosts)
    WRITES: ML_ADM::K12(BoundaryWithGhosts)
    WRITES: ML_ADM::K13(BoundaryWithGhosts)
    WRITES: ML_ADM::K22(BoundaryWithGhosts)
    WRITES: ML_ADM::K23(BoundaryWithGhosts)
    WRITES: ML_ADM::K33(BoundaryWithGhosts)
  } "ML_ADM_boundary"
}

schedule ML_ADM_convertToADMBase IN MoL_PostStep AFTER ML_ADM_ApplyBCs
{
  LANG: C
  READS: ML_ADM::K11(Everywhere)
  READS: ML_ADM::K12(Everywhere)
  READS: ML_ADM::K13(Everywhere)
  READS: ML_ADM::K22(Everywhere)
  READS: ML_ADM::K23(Everywhere)
  READS: ML_ADM::K33(Everywhere)
  READS: ML_ADM::alpha(Everywhere)
  READS: ML_ADM::g11(Everywhere)
  READS: ML_ADM::g12(Everywhere)
  READS: ML_ADM::g13(Everywhere)
  READS: ML_ADM::g22(Everywhere)
  READS: ML_ADM::g23(Everywhere)
  READS: ML_ADM::g33(Everywhere)
  READS: ML_ADM::beta1(Everywhere)
  READS: ML_ADM::beta2(Everywhere)
  READS: ML_ADM::beta3(Everywhere)
  WRITES: ADMBase::alp(Everywhere)
  WRITES: ADMBase::betax(Everywhere)
  WRITES: ADMBase::betay(Everywhere)
  WRITES: ADMBase::betaz(Everywhere)
  WRITES: ADMBase::dtalp(Everywhere)
  WRITES: ADMBase::dtbetax(Everywhere)
  WRITES: ADMBase::dtbetay(Everywhere)
  WRITES: ADMBase::dtbetaz(Everywhere)
  WRITES: ADMBase::gxx(Everywhere)
  WRITES: ADMBase::gxy(Everywhere)
  WRITES: ADMBase::gxz(Everywhere)
  WRITES: ADMBase::gyy(Everywhere)
  WRITES: ADMBase::gyz(Everywhere)
  WRITES: ADMBase::gzz(Everywhere)
  WRITES: ADMBase::kxx(Everywhere)
  WRITES: ADMBase::kxy(Everywhere)
  WRITES: ADMBase::kxz(Everywhere)
  WRITES: ADMBase::kyy(Everywhere)
  WRITES: ADMBase::kyz(Everywhere)
  WRITES: ADMBase::kzz(Everywhere)
} "ML_ADM_convertToADMBase"

schedule ML_ADM_constraints AT analysis
{
  LANG: C
  SYNC: ML_Ham
  SYNC: ML_mom
  READS: ML_ADM::K11(Everywhere)
  READS: ML_ADM::K12(Everywhere)
  READS: ML_ADM::K13(Everywhere)
  READS: ML_ADM::K22(Everywhere)
  READS: ML_ADM::K23(Everywhere)
  READS: ML_ADM::K33(Everywhere)
  READS: ML_ADM::g11(Everywhere)
  READS: ML_ADM::g12(Everywhere)
  READS: ML_ADM::g13(Everywhere)
  READS: ML_ADM::g22(Everywhere)
  READS: ML_ADM::g23(Everywhere)
  READS: ML_ADM::g33(Everywhere)
  WRITES: ML_ADM::H(Interior)
  WRITES: ML_ADM::M1(Interior)
  WRITES: ML_ADM::M2(Interior)
  WRITES: ML_ADM::M3(Interior)
} "ML_ADM_constraints"

schedule ML_ADM_constraints_boundary AT analysis AFTER ML_ADM_constraints
{
  LANG: C
  WRITES: ML_ADM::H(BoundaryWithGhosts)
  WRITES: ML_ADM::M1(BoundaryWithGhosts)
  WRITES: ML_ADM::M2(BoundaryWithGhosts)
  WRITES: ML_ADM::M3(BoundaryWithGhosts)
} "ML_ADM_constraints_boundary"

schedule ML_ADM_SelectBoundConds in MoL_PostStep
{
  LANG: C
  OPTIONS: level
  SYNC: ML_metric
  SYNC: ML_curv
  SYNC: ML_lapse
  SYNC: ML_shift
} "select boundary conditions"

schedule ML_ADM_CheckBoundaries at BASEGRID
{
  LANG: C
  OPTIONS: meta
} "check boundaries treatment"

schedule ML_ADM_RegisterVars in MoL_Register
{
  LANG: C
  OPTIONS: meta
} "Register Variables for MoL"
schedule group ApplyBCs as ML_ADM_ApplyBCs in MoL_PostStep after ML_ADM_SelectBoundConds
{
} "Apply boundary conditions controlled by thorn Boundary"
