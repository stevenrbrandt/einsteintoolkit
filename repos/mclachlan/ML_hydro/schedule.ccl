# File produced by Kranc

STORAGE: mass_group[timelevels]

STORAGE: mom_group[timelevels]

STORAGE: ene_group[timelevels]

STORAGE: rho_group[other_timelevels]

STORAGE: vel_group[other_timelevels]

STORAGE: eps_group[other_timelevels]

STORAGE: press_group[other_timelevels]

STORAGE: vol_group[other_timelevels]

STORAGE: massflux_group[other_timelevels]

STORAGE: momflux_group[other_timelevels]

STORAGE: eneflux_group[other_timelevels]

STORAGE: ene_grouprhs[rhs_timelevels]

STORAGE: mass_grouprhs[rhs_timelevels]

STORAGE: mom_grouprhs[rhs_timelevels]
schedule ML_hydro_Startup at STARTUP
{
  LANG: C
  OPTIONS: meta
} "create banner"

schedule ML_hydro_RegisterSymmetries in SymmetryRegister
{
  LANG: C
  OPTIONS: meta
} "register symmetries"

if (CCTK_EQUALS(initial_data, "vacuum"))
{
  schedule hydro_vacuum IN ADMBase_InitialData
  {
    LANG: C
    WRITES: ML_hydro::eps(Everywhere)
    WRITES: ML_hydro::rho(Everywhere)
    WRITES: ML_hydro::vel1(Everywhere)
    WRITES: ML_hydro::vel2(Everywhere)
    WRITES: ML_hydro::vel3(Everywhere)
  } "hydro_vacuum"
}

if (CCTK_EQUALS(initial_data, "sound wave"))
{
  schedule hydro_soundWave IN ADMBase_InitialData
  {
    LANG: C
    READS: grid::x(Everywhere)
    WRITES: ML_hydro::eps(Everywhere)
    WRITES: ML_hydro::rho(Everywhere)
    WRITES: ML_hydro::vel1(Everywhere)
    WRITES: ML_hydro::vel2(Everywhere)
    WRITES: ML_hydro::vel3(Everywhere)
  } "hydro_soundWave"
}

schedule hydro_prim2con AT initial AFTER ADMBase_PostInitial
{
  LANG: C
  READS: ML_hydro::eps(Everywhere)
  READS: ML_hydro::rho(Everywhere)
  READS: ML_hydro::vel1(Everywhere)
  READS: ML_hydro::vel2(Everywhere)
  READS: ML_hydro::vel3(Everywhere)
  WRITES: ML_hydro::ene(Everywhere)
  WRITES: ML_hydro::mass(Everywhere)
  WRITES: ML_hydro::mom1(Everywhere)
  WRITES: ML_hydro::mom2(Everywhere)
  WRITES: ML_hydro::mom3(Everywhere)
  WRITES: ML_hydro::vol(Everywhere)
} "hydro_prim2con"

schedule hydro_con2prim IN hydro_con2primGroup
{
  LANG: C
  READS: ML_hydro::ene(Everywhere)
  READS: ML_hydro::mass(Everywhere)
  READS: ML_hydro::mom1(Everywhere)
  READS: ML_hydro::mom2(Everywhere)
  READS: ML_hydro::mom3(Everywhere)
  READS: ML_hydro::vol(Everywhere)
  WRITES: ML_hydro::eps(Everywhere)
  WRITES: ML_hydro::press(Everywhere)
  WRITES: ML_hydro::rho(Everywhere)
  WRITES: ML_hydro::vel1(Everywhere)
  WRITES: ML_hydro::vel2(Everywhere)
  WRITES: ML_hydro::vel3(Everywhere)
} "hydro_con2prim"

schedule hydro_RHS IN hydro_evolCalcGroup AFTER hydro_fluxes
{
  LANG: C
  SYNC: ene_grouprhs
  SYNC: mass_grouprhs
  SYNC: mom_grouprhs
  READS: ML_hydro::eneflux1(Everywhere)
  READS: ML_hydro::eneflux2(Everywhere)
  READS: ML_hydro::eneflux3(Everywhere)
  READS: ML_hydro::massflux1(Everywhere)
  READS: ML_hydro::massflux2(Everywhere)
  READS: ML_hydro::massflux3(Everywhere)
  READS: ML_hydro::momflux11(Everywhere)
  READS: ML_hydro::momflux12(Everywhere)
  READS: ML_hydro::momflux13(Everywhere)
  READS: ML_hydro::momflux21(Everywhere)
  READS: ML_hydro::momflux22(Everywhere)
  READS: ML_hydro::momflux23(Everywhere)
  READS: ML_hydro::momflux31(Everywhere)
  READS: ML_hydro::momflux32(Everywhere)
  READS: ML_hydro::momflux33(Everywhere)
  WRITES: ML_hydro::enerhs(Interior)
  WRITES: ML_hydro::massrhs(Interior)
  WRITES: ML_hydro::mom1rhs(Interior)
  WRITES: ML_hydro::mom2rhs(Interior)
  WRITES: ML_hydro::mom3rhs(Interior)
} "hydro_RHS"

schedule ML_hydro_SelectBoundConds in MoL_PostStep
{
  LANG: C
  OPTIONS: level
  SYNC: mass_group
  SYNC: mom_group
  SYNC: ene_group
} "select boundary conditions"

schedule ML_hydro_CheckBoundaries at BASEGRID
{
  LANG: C
  OPTIONS: meta
} "check boundaries treatment"

schedule ML_hydro_RegisterVars in MoL_Register
{
  LANG: C
  OPTIONS: meta
} "Register Variables for MoL"
schedule group ApplyBCs as ML_hydro_ApplyBCs in MoL_PostStep after ML_hydro_SelectBoundConds
{
} "Apply boundary conditions controlled by thorn Boundary"
