# Schedule definitions for thorn NaNChecker
# $Header$

STORAGE: NaNmask NaNsFound

schedule NaNChecker_ResetCounter at BASEGRID
{
  LANG:    C
  OPTIONS: global
  WRITES: NaNChecker::NaNsFound(everywhere)
} "Reset the NaNChecker::NaNsFound counter"

schedule NaNChecker_ResetCounter at PRESTEP
{
  LANG:    C
  OPTIONS: global
  WRITES: NaNChecker::NaNsFound(everywhere)
} "Reset the NaNChecker::NaNsFound counter"

schedule NaNChecker_NaNCheck_Prepare IN NaNChecker_NaNCheck
{
  LANG:    C
  OPTIONS: level
  WRITES: NaNChecker::NaNmask(everywhere)
} "Prepare data structures to check for NaNs"

schedule GROUP NaNChecker_NaNCheck as zzz_NaNChecker_NaNCheck at POSTSTEP
{
} "Check for NaNs and count them in NaNChecker::NaNsFound"

schedule NaNChecker_NaNCheck_Check IN NaNChecker_NaNCheck AFTER NaNChecker_NaNCheck_Prepare
{
  LANG:    C
  OPTIONS: local
} "Check for NaNs"

schedule NaNChecker_NaNCheck_Finish IN NaNChecker_NaNCheck AFTER NaNChecker_NaNCheck_Check
{
  LANG:    C
  OPTIONS: level
  WRITES: NaNChecker::NaNsFound(everywhere)
} "Count NaNs in NaNChecker::NaNsFound"

schedule NaNChecker_TakeAction at POSTSTEP after zzz_NaNChecker_NaNCheck
{
  LANG:    C
  OPTIONS: global loop-level
  READS: NaNChecker::NaNsFound(everywhere)
} "Output NaNChecker::NaNmask and take action according to NaNChecker::action_if_found"

schedule GROUP NaNChecker_NaNCheck as zzz_NaNChecker_NaNCheck at POST_RECOVER_VARIABLES
{
} "Check for NaNs and count them in NaNChecker::NaNsFound"

schedule NaNChecker_TakeAction at POST_RECOVER_VARIABLES after zzz_NaNChecker_NaNCheck
{
  LANG:    C
  OPTIONS: global loop-level
  READS: NaNChecker::NaNsFound(everywhere)
} "Output NaNChecker::NaNmask and take action according to NaNChecker::action_if_found"

if (setup_test) {
  STORAGE: TestGF

  schedule NaNChecker_SetupTest at INITIAL
  {
    LANG:    C
  } "Set test grid function to NaN"
}
