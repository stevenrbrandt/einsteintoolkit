# Schedule definitions for thorn NPScalars_Proca

STORAGE: NPPsiR_group[3]
STORAGE: NPPsiI_group[3]
STORAGE: NPPhi0R_group[3]
STORAGE: NPPhi0I_group[3]
STORAGE: NPPhi1R_group[3]
STORAGE: NPPhi1I_group[3]
STORAGE: NPPhi2R_group[3]
STORAGE: NPPhi2I_group[3]


#=============================================================================
# Set symmetries for NPScalars grid functions
#=============================================================================
schedule NPProca_symmetries AT BASEGRID
{
  LANG: Fortran
  OPTIONS: Meta
} "Set symmetries for grid functions"


#=============================================================================
# Calculate NPScalars grid functions
#=============================================================================

schedule GROUP CalcNPProcaScalars AT POSTINITIAL
{
} "Calculate NPScalars"

schedule GROUP CalcNPProcaScalars AT ANALYSIS
{
} "Calculate NPScalars"


## Calculate all scalars as grid functions
schedule NPProca_calcPsiGF IN CalcNPProcaScalars
{
  LANG:    Fortran
  OPTIONS: Local
} "calculate grid functions"


schedule GROUP CalcNPProcaScalars_BC IN CalcNPProcaScalars AFTER NPProca_calcPsiGF
{
} "Boundary conditions"

schedule GROUP CalcNPProcaScalars_BC AT PostRegridInitial AFTER MoL_PostStep
{
} "Boundary conditions"

schedule GROUP CalcNPProcaScalars_BC AT PostRegrid AFTER MoL_PostStep
{
} "Boundary conditions"

schedule GROUP CalcNPProcaScalars_BC AT PostRestrictInitial AFTER MoL_PostStep
{
} "Boundary conditions"

schedule GROUP CalcNPProcaScalars_BC AT PostRestrict AFTER MoL_PostStep
{
} "Boundary conditions"


## Call symmetry boundary conditions
schedule NPProca_Boundaries IN CalcNPProcaScalars_BC
{
  LANG:    Fortran
  OPTIONS: level
  SYNC:    NPPsiR_group
  SYNC:    NPPsiI_group
  SYNC:    NPPhi0R_group
  SYNC:    NPPhi0I_group
  SYNC:    NPPhi1R_group
  SYNC:    NPPhi1I_group
  SYNC:    NPPhi2R_group
  SYNC:    NPPhi2I_group
} "Symmetry boundary conditions"

schedule GROUP ApplyBCs AS ApplyBCs_NPProca IN CalcNPProcaScalars_BC AFTER NPProca_Boundaries
{
} "Apply boundary conditions"
