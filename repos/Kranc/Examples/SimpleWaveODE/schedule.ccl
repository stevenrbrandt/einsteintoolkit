# File produced by Kranc

STORAGE: evolved_group[timelevels]

STORAGE: evolved_grouprhs[rhs_timelevels]

STORAGE: ode_group[other_timelevels]

STORAGE: ode_grouprhs[other_timelevels]
schedule SimpleWaveODE_Startup at STARTUP
{
  LANG: C
  OPTIONS: meta
} "create banner"

schedule SimpleWaveODE_RegisterSymmetries in SymmetryRegister
{
  LANG: C
  OPTIONS: meta
} "register symmetries"

schedule initial_sine AT INITIAL
{
  LANG: C
  READS: grid::x(Everywhere)
  WRITES: SimpleWaveODE::a(Everywhere)
  WRITES: SimpleWaveODE::b(Everywhere)
  WRITES: SimpleWaveODE::phi(Everywhere)
  WRITES: SimpleWaveODE::pi(Everywhere)
} "initial_sine"

schedule calc_rhs in MoL_CalcRHS
{
  LANG: C
  READS: SimpleWaveODE::phi(Everywhere)
  READS: SimpleWaveODE::pi(Everywhere)
  READS: SimpleWaveODE::a(Everywhere)
  READS: SimpleWaveODE::b(Everywhere)
  WRITES: SimpleWaveODE::arhs(Interior)
  WRITES: SimpleWaveODE::brhs(Interior)
  WRITES: SimpleWaveODE::phirhs(Interior)
  WRITES: SimpleWaveODE::pirhs(Interior)
} "calc_rhs"

schedule SimpleWaveODE_SelectBoundConds in MoL_PostStep
{
  LANG: C
  OPTIONS: level
  SYNC: evolved_group
} "select boundary conditions"

schedule SimpleWaveODE_CheckBoundaries at BASEGRID
{
  LANG: C
  OPTIONS: meta
} "check boundaries treatment"

schedule SimpleWaveODE_RegisterVars in MoL_Register
{
  LANG: C
  OPTIONS: meta
} "Register Variables for MoL"
schedule group ApplyBCs as SimpleWaveODE_ApplyBCs in MoL_PostStep after SimpleWaveODE_SelectBoundConds
{
} "Apply boundary conditions controlled by thorn Boundary"
