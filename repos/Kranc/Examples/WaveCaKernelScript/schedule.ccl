# File produced by Kranc

STORAGE: phi_group[timelevels]

STORAGE: pi_group[timelevels]

STORAGE: phi_grouprhs[rhs_timelevels]

STORAGE: pi_grouprhs[rhs_timelevels]
schedule WaveCaKernelScript_Startup at STARTUP
{
  LANG: C
  OPTIONS: meta
} "create banner"

schedule WaveCaKernelScript_RegisterSymmetries in SymmetryRegister
{
  LANG: C
  OPTIONS: meta
} "register symmetries"

schedule CAKERNEL_Launch_initial_gaussian_calc as initial_gaussian_calc at initial
{
  LANG: C
  TAGS: Device=1
  READS: grid::x(Everywhere)
  WRITES: WaveCaKernelScript::phi(ERROR(Automatic))
  WRITES: WaveCaKernelScript::pi(ERROR(Automatic))
} "initial_gaussian_calc"

schedule CAKERNEL_Launch_calc_rhs as calc_rhs in MoL_CalcRHS
{
  LANG: C
  TAGS: Device=1
  READS: WaveCaKernelScript::phi(Everywhere)
  READS: WaveCaKernelScript::pi(Everywhere)
  WRITES: WaveCaKernelScript::phirhs(ERROR(Automatic))
  WRITES: WaveCaKernelScript::pirhs(ERROR(Automatic))
} "calc_rhs"

schedule CAKERNEL_Launch_calc_bound_rhs as calc_bound_rhs in MoL_RHSBoundaries
{
  LANG: C
  TAGS: Device=1
  READS: grid::x(Everywhere)
  WRITES: WaveCaKernelScript::phirhs(ERROR(Automatic))
  WRITES: WaveCaKernelScript::pirhs(ERROR(Automatic))
} "calc_bound_rhs"

schedule WaveCaKernelScript_SelectBoundConds in MoL_PostStep
{
  LANG: C
  OPTIONS: level
  SYNC: phi_group
  SYNC: pi_group
} "select boundary conditions"

schedule WaveCaKernelScript_CheckBoundaries at BASEGRID
{
  LANG: C
  OPTIONS: meta
} "check boundaries treatment"

schedule WaveCaKernelScript_RegisterVars in MoL_Register
{
  LANG: C
  OPTIONS: meta
} "Register Variables for MoL"

schedule WaveCaKernelScript_Init in CCTK_BASEGRID after Accelerator_SetDevice
{
  LANG: C
  OPTIONS: local
} "Initialize CUDA Device"
schedule group ApplyBCs as WaveCaKernelScript_ApplyBCs in MoL_PostStep after WaveCaKernelScript_SelectBoundConds
{
} "Apply boundary conditions controlled by thorn Boundary"
